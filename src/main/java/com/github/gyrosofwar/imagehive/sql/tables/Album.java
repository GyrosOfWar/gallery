/*
 * This file is generated by jOOQ.
 */
package com.github.gyrosofwar.imagehive.sql.tables;

import com.github.gyrosofwar.imagehive.sql.Keys;
import com.github.gyrosofwar.imagehive.sql.Public;
import com.github.gyrosofwar.imagehive.sql.tables.records.AlbumRecord;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.album</code>
   */
  public static final Album ALBUM = new Album();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<AlbumRecord> getRecordType() {
    return AlbumRecord.class;
  }

  /**
   * The column <code>public.album.id</code>.
   */
  public final TableField<AlbumRecord, Long> ID = createField(
    DSL.name("id"),
    SQLDataType.BIGINT.nullable(false).identity(true),
    this,
    ""
  );

  /**
   * The column <code>public.album.name</code>.
   */
  public final TableField<AlbumRecord, String> NAME = createField(
    DSL.name("name"),
    SQLDataType.VARCHAR.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.album.created_on</code>.
   */
  public final TableField<AlbumRecord, OffsetDateTime> CREATED_ON = createField(
    DSL.name("created_on"),
    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.album.owner_id</code>.
   */
  public final TableField<AlbumRecord, Long> OWNER_ID = createField(
    DSL.name("owner_id"),
    SQLDataType.BIGINT,
    this,
    ""
  );

  /**
   * The column <code>public.album.tags</code>.
   */
  public final TableField<AlbumRecord, String[]> TAGS = createField(
    DSL.name("tags"),
    SQLDataType.VARCHAR.getArrayDataType(),
    this,
    ""
  );

  private Album(Name alias, Table<AlbumRecord> aliased) {
    this(alias, aliased, null);
  }

  private Album(Name alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.album</code> table reference
   */
  public Album(String alias) {
    this(DSL.name(alias), ALBUM);
  }

  /**
   * Create an aliased <code>public.album</code> table reference
   */
  public Album(Name alias) {
    this(alias, ALBUM);
  }

  /**
   * Create a <code>public.album</code> table reference
   */
  public Album() {
    this(DSL.name("album"), null);
  }

  public <O extends Record> Album(Table<O> child, ForeignKey<O, AlbumRecord> key) {
    super(child, key, ALBUM);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public Identity<AlbumRecord, Long> getIdentity() {
    return (Identity<AlbumRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<AlbumRecord> getPrimaryKey() {
    return Keys.ALBUM_PKEY;
  }

  @Override
  public List<ForeignKey<AlbumRecord, ?>> getReferences() {
    return Arrays.asList(Keys.ALBUM__ALBUM_OWNER_ID_FKEY);
  }

  private transient User _user;

  public User user() {
    if (_user == null) _user = new User(this, Keys.ALBUM__ALBUM_OWNER_ID_FKEY);

    return _user;
  }

  @Override
  public Album as(String alias) {
    return new Album(DSL.name(alias), this);
  }

  @Override
  public Album as(Name alias) {
    return new Album(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Album rename(String name) {
    return new Album(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Album rename(Name name) {
    return new Album(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<Long, String, OffsetDateTime, Long, String[]> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}
