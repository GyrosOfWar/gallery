/*
 * This file is generated by jOOQ.
 */
package com.github.gyrosofwar.imagehive.sql;

import com.github.gyrosofwar.imagehive.sql.tables.Album;
import com.github.gyrosofwar.imagehive.sql.tables.AlbumImage;
import com.github.gyrosofwar.imagehive.sql.tables.Image;
import com.github.gyrosofwar.imagehive.sql.tables.User;
import com.github.gyrosofwar.imagehive.sql.tables.records.AlbumImageRecord;
import com.github.gyrosofwar.imagehive.sql.tables.records.AlbumRecord;
import com.github.gyrosofwar.imagehive.sql.tables.records.ImageRecord;
import com.github.gyrosofwar.imagehive.sql.tables.records.UserRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  public static final UniqueKey<AlbumRecord> ALBUM_PKEY = Internal.createUniqueKey(
    Album.ALBUM,
    DSL.name("album_pkey"),
    new TableField[] { Album.ALBUM.ID },
    true
  );
  public static final UniqueKey<AlbumImageRecord> ALBUM_IMAGE_ALBUM_ID_IMAGE_ID_KEY = Internal.createUniqueKey(
    AlbumImage.ALBUM_IMAGE,
    DSL.name("album_image_album_id_image_id_key"),
    new TableField[] { AlbumImage.ALBUM_IMAGE.ALBUM_ID, AlbumImage.ALBUM_IMAGE.IMAGE_ID },
    true
  );
  public static final UniqueKey<ImageRecord> IMAGE_PKEY = Internal.createUniqueKey(
    Image.IMAGE,
    DSL.name("image_pkey"),
    new TableField[] { Image.IMAGE.ID },
    true
  );
  public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(
    User.USER,
    DSL.name("user_pkey"),
    new TableField[] { User.USER.ID },
    true
  );

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  public static final ForeignKey<AlbumRecord, UserRecord> ALBUM__ALBUM_OWNER_ID_FKEY = Internal.createForeignKey(
    Album.ALBUM,
    DSL.name("album_owner_id_fkey"),
    new TableField[] { Album.ALBUM.OWNER_ID },
    Keys.USER_PKEY,
    new TableField[] { User.USER.ID },
    true
  );
  public static final ForeignKey<AlbumImageRecord, AlbumRecord> ALBUM_IMAGE__ALBUM_IMAGE_ALBUM_ID_FKEY = Internal.createForeignKey(
    AlbumImage.ALBUM_IMAGE,
    DSL.name("album_image_album_id_fkey"),
    new TableField[] { AlbumImage.ALBUM_IMAGE.ALBUM_ID },
    Keys.ALBUM_PKEY,
    new TableField[] { Album.ALBUM.ID },
    true
  );
  public static final ForeignKey<AlbumImageRecord, ImageRecord> ALBUM_IMAGE__ALBUM_IMAGE_IMAGE_ID_FKEY = Internal.createForeignKey(
    AlbumImage.ALBUM_IMAGE,
    DSL.name("album_image_image_id_fkey"),
    new TableField[] { AlbumImage.ALBUM_IMAGE.IMAGE_ID },
    Keys.IMAGE_PKEY,
    new TableField[] { Image.IMAGE.ID },
    true
  );
  public static final ForeignKey<ImageRecord, UserRecord> IMAGE__IMAGE_OWNER_ID_FKEY = Internal.createForeignKey(
    Image.IMAGE,
    DSL.name("image_owner_id_fkey"),
    new TableField[] { Image.IMAGE.OWNER_ID },
    Keys.USER_PKEY,
    new TableField[] { User.USER.ID },
    true
  );
}
