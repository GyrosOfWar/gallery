/*
 * This file is generated by jOOQ.
 */
package com.github.gyrosofwar.imagehive.sql.tables;

import com.github.gyrosofwar.imagehive.sql.Keys;
import com.github.gyrosofwar.imagehive.sql.Public;
import com.github.gyrosofwar.imagehive.sql.tables.records.UserRecord;
import java.time.OffsetDateTime;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.user</code>
   */
  public static final User USER = new User();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<UserRecord> getRecordType() {
    return UserRecord.class;
  }

  /**
   * The column <code>public.user.id</code>.
   */
  public final TableField<UserRecord, Long> ID = createField(
    DSL.name("id"),
    SQLDataType.BIGINT.nullable(false).identity(true),
    this,
    ""
  );

  /**
   * The column <code>public.user.username</code>.
   */
  public final TableField<UserRecord, String> USERNAME = createField(
    DSL.name("username"),
    SQLDataType.VARCHAR.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.email</code>.
   */
  public final TableField<UserRecord, String> EMAIL = createField(
    DSL.name("email"),
    SQLDataType.VARCHAR.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.password_hash</code>.
   */
  public final TableField<UserRecord, String> PASSWORD_HASH = createField(
    DSL.name("password_hash"),
    SQLDataType.VARCHAR.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.admin</code>.
   */
  public final TableField<UserRecord, Boolean> ADMIN = createField(
    DSL.name("admin"),
    SQLDataType.BOOLEAN.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.totp_secret</code>.
   */
  public final TableField<UserRecord, String> TOTP_SECRET = createField(
    DSL.name("totp_secret"),
    SQLDataType.VARCHAR,
    this,
    ""
  );

  /**
   * The column <code>public.user.user_settings</code>.
   */
  public final TableField<UserRecord, JSONB> USER_SETTINGS = createField(
    DSL.name("user_settings"),
    SQLDataType.JSONB.nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.created_on</code>.
   */
  public final TableField<UserRecord, OffsetDateTime> CREATED_ON = createField(
    DSL.name("created_on"),
    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
    this,
    ""
  );

  /**
   * The column <code>public.user.last_login</code>.
   */
  public final TableField<UserRecord, OffsetDateTime> LAST_LOGIN = createField(
    DSL.name("last_login"),
    SQLDataType.TIMESTAMPWITHTIMEZONE(6),
    this,
    ""
  );

  private User(Name alias, Table<UserRecord> aliased) {
    this(alias, aliased, null);
  }

  private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.user</code> table reference
   */
  public User(String alias) {
    this(DSL.name(alias), USER);
  }

  /**
   * Create an aliased <code>public.user</code> table reference
   */
  public User(Name alias) {
    this(alias, USER);
  }

  /**
   * Create a <code>public.user</code> table reference
   */
  public User() {
    this(DSL.name("user"), null);
  }

  public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
    super(child, key, USER);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public Identity<UserRecord, Long> getIdentity() {
    return (Identity<UserRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<UserRecord> getPrimaryKey() {
    return Keys.USER_PKEY;
  }

  @Override
  public User as(String alias) {
    return new User(DSL.name(alias), this);
  }

  @Override
  public User as(Name alias) {
    return new User(alias, this);
  }

  @Override
  public User as(Table<?> alias) {
    return new User(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public User rename(String name) {
    return new User(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public User rename(Name name) {
    return new User(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public User rename(Table<?> name) {
    return new User(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row9 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row9<Long, String, String, String, Boolean, String, JSONB, OffsetDateTime, OffsetDateTime> fieldsRow() {
    return (Row9) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(
    Function9<? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super JSONB, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from
  ) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  public <U> SelectField<U> mapping(
    Class<U> toType,
    Function9<? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super JSONB, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from
  ) {
    return convertFrom(toType, Records.mapping(from));
  }
}
