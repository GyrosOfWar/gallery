/* tslint:disable */
/* eslint-disable */
/**
 * Imagehive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 */
export const HttpStatus = {
  Continue: "CONTINUE",
  SwitchingProtocols: "SWITCHING_PROTOCOLS",
  Processing: "PROCESSING",
  Ok: "OK",
  Created: "CREATED",
  Accepted: "ACCEPTED",
  NonAuthoritativeInformation: "NON_AUTHORITATIVE_INFORMATION",
  NoContent: "NO_CONTENT",
  ResetContent: "RESET_CONTENT",
  PartialContent: "PARTIAL_CONTENT",
  MultiStatus: "MULTI_STATUS",
  AlreadyImported: "ALREADY_IMPORTED",
  ImUsed: "IM_USED",
  MultipleChoices: "MULTIPLE_CHOICES",
  MovedPermanently: "MOVED_PERMANENTLY",
  Found: "FOUND",
  SeeOther: "SEE_OTHER",
  NotModified: "NOT_MODIFIED",
  UseProxy: "USE_PROXY",
  SwitchProxy: "SWITCH_PROXY",
  TemporaryRedirect: "TEMPORARY_REDIRECT",
  PermanentRedirect: "PERMANENT_REDIRECT",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  PaymentRequired: "PAYMENT_REQUIRED",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  MethodNotAllowed: "METHOD_NOT_ALLOWED",
  NotAcceptable: "NOT_ACCEPTABLE",
  ProxyAuthenticationRequired: "PROXY_AUTHENTICATION_REQUIRED",
  RequestTimeout: "REQUEST_TIMEOUT",
  Conflict: "CONFLICT",
  Gone: "GONE",
  LengthRequired: "LENGTH_REQUIRED",
  PreconditionFailed: "PRECONDITION_FAILED",
  RequestEntityTooLarge: "REQUEST_ENTITY_TOO_LARGE",
  RequestUriTooLong: "REQUEST_URI_TOO_LONG",
  UnsupportedMediaType: "UNSUPPORTED_MEDIA_TYPE",
  RequestedRangeNotSatisfiable: "REQUESTED_RANGE_NOT_SATISFIABLE",
  ExpectationFailed: "EXPECTATION_FAILED",
  IAmATeapot: "I_AM_A_TEAPOT",
  EnhanceYourCalm: "ENHANCE_YOUR_CALM",
  UnprocessableEntity: "UNPROCESSABLE_ENTITY",
  Locked: "LOCKED",
  FailedDependency: "FAILED_DEPENDENCY",
  UnorderedCollection: "UNORDERED_COLLECTION",
  TooEarly: "TOO_EARLY",
  UpgradeRequired: "UPGRADE_REQUIRED",
  PreconditionRequired: "PRECONDITION_REQUIRED",
  TooManyRequests: "TOO_MANY_REQUESTS",
  RequestHeaderFieldsTooLarge: "REQUEST_HEADER_FIELDS_TOO_LARGE",
  NoResponse: "NO_RESPONSE",
  BlockedByWindowsParentalControls: "BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS",
  UnavailableForLegalReasons: "UNAVAILABLE_FOR_LEGAL_REASONS",
  RequestHeaderTooLarge: "REQUEST_HEADER_TOO_LARGE",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  NotImplemented: "NOT_IMPLEMENTED",
  BadGateway: "BAD_GATEWAY",
  ServiceUnavailable: "SERVICE_UNAVAILABLE",
  GatewayTimeout: "GATEWAY_TIMEOUT",
  HttpVersionNotSupported: "HTTP_VERSION_NOT_SUPPORTED",
  VariantAlsoNegotiates: "VARIANT_ALSO_NEGOTIATES",
  InsufficientStorage: "INSUFFICIENT_STORAGE",
  LoopDetected: "LOOP_DETECTED",
  BandwidthLimitExceeded: "BANDWIDTH_LIMIT_EXCEEDED",
  NotExtended: "NOT_EXTENDED",
  NetworkAuthenticationRequired: "NETWORK_AUTHENTICATION_REQUIRED",
  ConnectionTimedOut: "CONNECTION_TIMED_OUT",
} as const
export type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus]

export function HttpStatusFromJSON(json: any): HttpStatus {
  return HttpStatusFromJSONTyped(json, false)
}

export function HttpStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): HttpStatus {
  return json as HttpStatus
}

export function HttpStatusToJSON(value?: HttpStatus | null): any {
  return value as any
}
