/* tslint:disable */
/* eslint-disable */
/**
 * Imagehive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {HttpStatus, ImageDTO, UserCreateDTO} from "../models"
import {
  HttpStatusFromJSON,
  HttpStatusToJSON,
  ImageDTOFromJSON,
  ImageDTOToJSON,
  UserCreateDTOFromJSON,
  UserCreateDTOToJSON,
} from "../models"

export interface CreateRequest {
  userCreateDTO: UserCreateDTO
}

export interface GetImageRequest {
  uuid: string
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<HttpStatus>> {
    if (
      requestParameters.userCreateDTO === null ||
      requestParameters.userCreateDTO === undefined
    ) {
      throw new runtime.RequiredError(
        "userCreateDTO",
        "Required parameter requestParameters.userCreateDTO was null or undefined when calling create."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/api/admin/user/create`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserCreateDTOToJSON(requestParameters.userCreateDTO),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HttpStatusFromJSON(jsonValue)
    )
  }

  /**
   */
  async create(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<HttpStatus> {
    const response = await this.createRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async getImageRaw(
    requestParameters: GetImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageDTO>> {
    if (
      requestParameters.uuid === null ||
      requestParameters.uuid === undefined
    ) {
      throw new runtime.RequiredError(
        "uuid",
        "Required parameter requestParameters.uuid was null or undefined when calling getImage."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/images/{uuid}`.replace(
          `{${"uuid"}}`,
          encodeURIComponent(String(requestParameters.uuid))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ImageDTOFromJSON(jsonValue)
    )
  }

  /**
   */
  async getImage(
    requestParameters: GetImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageDTO> {
    const response = await this.getImageRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async getImagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ImageDTO>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/images`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ImageDTOFromJSON)
    )
  }

  /**
   */
  async getImages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ImageDTO>> {
    const response = await this.getImagesRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async uploadImagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/images`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async uploadImages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.uploadImagesRaw(initOverrides)
  }
}
